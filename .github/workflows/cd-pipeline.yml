name: CI/CD Pipeline with SonarCloud

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Job existente de CI y SonarCloud
  sonarcloud:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests and generate coverage
        run: npm test

      # ‚ú® NUEVO: Validaci√≥n de seguridad - Escaneo de vulnerabilidades
      - name: Security Vulnerability Scan
        run: |
          echo "üîç Escaneando vulnerabilidades en dependencias..."
          npm audit --audit-level=moderate --production || echo "‚ö†Ô∏è Vulnerabilidades encontradas - revisar antes de producci√≥n"

      - name: Verify coverage file exists
        run: |
          echo "Checking if coverage file exists..."
          ls -la coverage/
          echo "Coverage file content preview:"
          head -20 coverage/lcov.info

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # NUEVO JOB: Despliegue en entorno de pruebas (CD)
  deploy-test:
    name: Deploy to Test Environment
    runs-on: ubuntu-latest
    needs: sonarcloud  # Solo se ejecuta si SonarCloud pasa
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image for testing
        run: |
          docker build -f Dockerfile.test -t maticrud-test:${{ github.sha }} .
          docker tag maticrud-test:${{ github.sha }} maticrud-test:latest

      # ‚ú® NUEVO: Validaci√≥n de seguridad - Integridad de artefactos
      - name: Generate Image Integrity Hash
        run: |
          echo "üîí Generando hash de integridad del artefacto..."
          IMAGE_HASH=$(docker image inspect maticrud-test:${{ github.sha }} --format='{{.Id}}')
          echo "IMAGE_HASH=$IMAGE_HASH" >> $GITHUB_ENV
          echo "üìã Image Integrity Hash: $IMAGE_HASH"
          echo "‚úÖ Integridad de artefacto verificada y documentada"

      # ‚ú® NUEVO: Escaneo de vulnerabilidades en imagen Docker
      - name: Docker Image Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'maticrud-test:${{ github.sha }}'
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
      
      - name: Start test environment
        run: |
          echo "üöÄ Starting test environment..."
          docker compose -f docker-compose.test.yml up -d
          echo "‚è≥ Waiting for services to be ready..."
          sleep 30
      
      - name: Check containers status
        run: |
          echo "üìã Container status:"
          docker compose -f docker-compose.test.yml ps
          echo "üìã Container logs:"
          docker compose -f docker-compose.test.yml logs
      
      - name: Health check
        run: |
          echo "üîç Performing health check..."
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if curl -f http://localhost:3001/health 2>/dev/null; then
              echo "‚úÖ Health check passed!"
              break
            else
              echo "‚è≥ Attempt $attempt/$max_attempts failed, retrying in 10s..."
              sleep 10
              ((attempt++))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "‚ùå Health check failed after $max_attempts attempts"
            echo "üìã Final container logs:"
            docker compose -f docker-compose.test.yml logs
            exit 1
          fi
      
      - name: Run integration tests
        run: |
          echo "üß™ Running integration tests..."
          # Verificar endpoint principal
          curl -f http://localhost:3001/health
          # Verificar endpoint de bienvenida
          curl -f http://localhost:3001/
          echo "‚úÖ Integration tests passed!"
      
      - name: Display deployment info
        run: |
          echo "üéâ Deployment successful!"
          echo "üìä Test Environment: http://localhost:3001"
          echo "üóÑÔ∏è  Database: mongodb://localhost:27018/MiniCore_test"
          echo "üîí Image Hash: $IMAGE_HASH"
      
      - name: Cleanup test environment
        if: always()
        run: |
          echo "üßπ Cleaning up test environment..."
          docker compose -f docker-compose.test.yml down
          docker compose -f docker-compose.test.yml down --volumes
      
      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "‚úÖ Test deployment completed successfully"
          else
            echo "‚ùå Test deployment failed"
            exit 1
          fi

  # üÜï NUEVO JOB: Despliegue en entorno de producci√≥n simulado
  deploy-production:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    needs: [sonarcloud, deploy-test]  # Se ejecuta despu√©s de testing
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production  # Requiere aprobaci√≥n manual
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build production image
        run: |
          echo "üèóÔ∏è Construyendo imagen de producci√≥n..."
          docker build -f Dockerfile.prod -t maticrud-prod:${{ github.sha }} .
          docker tag maticrud-prod:${{ github.sha }} maticrud-prod:latest
      
      - name: Generate production integrity hash
        run: |
          echo "üîí Generando hash de integridad para producci√≥n..."
          PROD_HASH=$(docker image inspect maticrud-prod:${{ github.sha }} --format='{{.Id}}')
          echo "PROD_HASH=$PROD_HASH" >> $GITHUB_ENV
          echo "üìã Production Image Hash: $PROD_HASH"
      
      - name: Production security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'maticrud-prod:${{ github.sha }}'
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
      
      - name: Start production environment
        run: |
          echo "üöÄ Iniciando entorno de producci√≥n..."
          docker compose -f docker-compose.prod.yml up -d
          echo "‚è≥ Esperando a que los servicios est√©n listos..."
          sleep 45
      
      - name: Check production containers status
        run: |
          echo "üìã Estado de contenedores de producci√≥n:"
          docker compose -f docker-compose.prod.yml ps
          echo "üìã Logs de producci√≥n:"
          docker compose -f docker-compose.prod.yml logs --tail=20
      
      - name: Production health check
        run: |
          echo "üîç Ejecutando health check de producci√≥n..."
          max_attempts=15
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if curl -f http://localhost:3002/health 2>/dev/null; then
              echo "‚úÖ Health check de producci√≥n exitoso!"
              break
            else
              echo "‚è≥ Intento $attempt/$max_attempts fallido, reintentando en 10s..."
              sleep 10
              ((attempt++))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "‚ùå Health check de producci√≥n fall√≥"
            echo "üìã Logs finales:"
            docker compose -f docker-compose.prod.yml logs maticrud-prod
            exit 1
          fi
      
      - name: Production smoke tests
        run: |
          echo "üß™ Ejecutando pruebas de smoke testing en producci√≥n..."
          
          # Verificar endpoints principales
          curl -f http://localhost:3002/health
          curl -f http://localhost:3002/
          
          # Verificar que la API responde
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3002/user)
          if [ $response -eq 200 ] || [ $response -eq 401 ]; then
            echo "‚úÖ API endpoints respondiendo correctamente"
          else
            echo "‚ùå API endpoints no responden correctamente (status: $response)"
            exit 1
          fi
          
          echo "‚úÖ Smoke tests de producci√≥n completados!"
      
      - name: Production performance test
        run: |
          echo "‚ö° Ejecutando prueba de rendimiento b√°sica..."
          
          # Medir tiempo de respuesta
          start_time=$(date +%s%N)
          curl -f http://localhost:3002/health > /dev/null
          end_time=$(date +%s%N)
          
          response_time=$((($end_time - $start_time) / 1000000))
          echo "‚è±Ô∏è Tiempo de respuesta: ${response_time}ms"
          
          if [ $response_time -lt 2000 ]; then
            echo "‚úÖ Rendimiento dentro del rango aceptable"
          else
            echo "‚ö†Ô∏è Advertencia: Tiempo de respuesta alto"
          fi
      
      - name: Production security validation
        run: |
          echo "üõ°Ô∏è Validando seguridad en producci√≥n..."
          
          # Verificar que no hay puertos inseguros
          if docker compose -f docker-compose.prod.yml ps | grep -q "22/tcp\|23/tcp\|21/tcp"; then
            echo "‚ùå Puertos inseguros detectados"
            exit 1
          fi
          
          # Verificar headers de respuesta
          headers=$(curl -s -I http://localhost:3002/health)
          if echo "$headers" | grep -q "X-Powered-By"; then
            echo "‚ö†Ô∏è Advertencia: Header X-Powered-By expuesto"
          fi
          
          echo "‚úÖ Validaciones de seguridad completadas"
      
      - name: Display production deployment info
        run: |
          echo "üéâ ¬°Despliegue de producci√≥n completado exitosamente!"
          echo "=================================================="
          echo "üåê Producci√≥n: http://localhost:3002"
          echo "üîç Health Check: http://localhost:3002/health"
          echo "üóÑÔ∏è MongoDB: mongodb://localhost:27019/MiniCore_prod"
          echo "üîí Image Hash: $PROD_HASH"
          echo ""
          echo "üìä Resumen de entornos:"
          echo "  üß™ Testing: http://localhost:3001"
          echo "  üè≠ Production: http://localhost:3002"
      
      - name: Cleanup production environment
        if: always()
        run: |
          echo "üßπ Limpiando entorno de producci√≥n..."
          docker compose -f docker-compose.prod.yml down --volumes
          echo "‚úÖ Limpieza completada"
      
      - name: Notify production deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "‚úÖ Despliegue de producci√≥n completado exitosamente"
            echo "üéØ Listo para despliegue en producci√≥n real"
          else
            echo "‚ùå Despliegue de producci√≥n fall√≥"
            exit 1
          fi