name: CI/CD Pipeline with SonarCloud

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Job existente de CI y SonarCloud
  sonarcloud:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests and generate coverage
        run: npm test

      - name: Verify coverage file exists
        run: |
          echo "Checking if coverage file exists..."
          ls -la coverage/
          echo "Coverage file content preview:"
          head -20 coverage/lcov.info

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # NUEVO JOB: Despliegue en entorno de pruebas (CD)
  deploy-test:
    name: Deploy to Test Environment
    runs-on: ubuntu-latest
    needs: sonarcloud  # Solo se ejecuta si SonarCloud pasa
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image for testing
        run: |
          docker build -f Dockerfile.test -t maticrud-test:${{ github.sha }} .
          docker tag maticrud-test:${{ github.sha }} maticrud-test:latest
      
      - name: Start test environment
        run: |
          echo "🚀 Starting test environment..."
          docker compose -f docker-compose.test.yml up -d
          echo "⏳ Waiting for services to be ready..."
          sleep 30
      
      - name: Check containers status
        run: |
          echo "📋 Container status:"
          docker compose -f docker-compose.test.yml ps
          echo "📋 Container logs:"
          docker compose -f docker-compose.test.yml logs
      
      - name: Health check
        run: |
          echo "🔍 Performing health check..."
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if curl -f http://localhost:3001/health 2>/dev/null; then
              echo "✅ Health check passed!"
              break
            else
              echo "⏳ Attempt $attempt/$max_attempts failed, retrying in 10s..."
              sleep 10
              ((attempt++))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Health check failed after $max_attempts attempts"
            echo "📋 Final container logs:"
            docker compose -f docker-compose.test.yml logs
            exit 1
          fi
      
      - name: Run integration tests
        run: |
          echo "🧪 Running integration tests..."
          # Verificar endpoint principal
          curl -f http://localhost:3001/health
          # Verificar endpoint de bienvenida
          curl -f http://localhost:3001/
          echo "✅ Integration tests passed!"
      
      - name: Display deployment info
        run: |
          echo "🎉 Deployment successful!"
          echo "📊 Test Environment: http://localhost:3001"
          echo "🗄️  Database: mongodb://localhost:27018/MiniCore_test"
      
      - name: Cleanup test environment
        if: always()
        run: |
          echo "🧹 Cleaning up test environment..."
          docker compose -f docker-compose.test.yml down
          docker compose -f docker-compose.test.yml down --volumes
      
      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Test deployment completed successfully"
          else
            echo "❌ Test deployment failed"
            exit 1
          fi